import random
import math


def distance(city1, city2):
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)


def tour_length(tour, cities):
    length = 0
    for i in range(len(tour)):
        length += distance(cities[tour[i]], cities[tour[(i+1) % len(tour)]])
    return length


def choose_next_city(current_city, unvisited, pheromone, cities, alpha, beta):
    probabilities = []
    denominator = 0
    for city in unvisited:
        pher = pheromone[current_city][city] ** alpha
        dist = distance(cities[current_city], cities[city])
        desirability = (1 / dist) ** beta
        prob = pher * desirability
        probabilities.append(prob)
        denominator += prob
    probabilities = [p / denominator for p in probabilities]

   
    r = random.random()
    cumulative = 0
    for i, prob in enumerate(probabilities):
        cumulative += prob
        if r <= cumulative:
            return unvisited[i]
    return unvisited[-1]


def ant_colony_optimization(cities, n_ants=10, n_iterations=5, alpha=1, beta=5, evaporation_rate=0.5, Q=30):
    n_cities = len(cities)
    pheromone = [[1 for _ in range(n_cities)] for _ in range(n_cities)]  # Initial pheromone

    best_tour = None
    best_length = float('inf')

    for iteration in range(n_iterations):
        all_tours = []
        all_lengths = []

        for _ in range(n_ants):
            start_city = random.randint(0, n_cities - 1)
            tour = [start_city]
            unvisited = list(range(n_cities))
            unvisited.remove(start_city)

            current_city = start_city
            while unvisited:
                next_city = choose_next_city(current_city, unvisited, pheromone, cities, alpha, beta)
                tour.append(next_city)
                unvisited.remove(next_city)
                current_city = next_city

            length = tour_length(tour, cities)
            all_tours.append(tour)
            all_lengths.append(length)

            if length < best_length:
                best_length = length
                best_tour = tour

       
        for i in range(n_cities):
            for j in range(n_cities):
                pheromone[i][j] *= (1 - evaporation_rate)
                if pheromone[i][j] < 0.1:
                    pheromone[i][j] = 0.1  

       
        for tour, length in zip(all_tours, all_lengths):
            pheromone_deposit = Q / length
            for i in range(n_cities):
                from_city = tour[i]
                to_city = tour[(i + 1) % n_cities]
                pheromone[from_city][to_city] += pheromone_deposit
                pheromone[to_city][from_city] += pheromone_deposit  

       
        print(f"Iteration {iteration+1}: Best length = {best_length:.2f}")

    return best_tour, best_length

if __name__ == "__main__":
   
    cities = [
        (0, 0),
        (1, 5),
        (5, 2),
        (6, 6),
        (8, 3)
    ]

    best_route, best_distance = ant_colony_optimization(cities)
    print("Best route found:", best_route)
    print("Distance of best route:", best_distance)
